---
import Layout from '@layouts/Layout.astro';
import data from '../../public/data/work.json';
import TagList from '@components/TagList.astro';

// TODO interface
const work = ((data as unknown as any[]) ?? [])
---

<Layout title="My work - David (davru) Sanchez" description={'A quick overview of my past work, but ye... just the "finished" projects.'}>
  <main class="work">
	  <div class="work__slider" id="slider" data-slide="1">
   		<figure class="work__slider__image">
   			<a target="_blank" id="slider-url" href={work[0].url}>
    			{ work.map(project => <img src={project.image} alt={`${project.name} - ${project.summary}`}> )}
				</a>
				<div id="work__slider__image__wip"><TagList tags={['WIP']} /></div>
     	</figure>

      <hgroup class="work__slider__title">
      	<h2><a target="_blank" id="slider-title" href={work[0].url}>{work[0].name}</a></h2>
      	<p id="slider-summary">{work[0].summary}</p>
      </hgroup>

			<div class="work__slider__controls">
				<span class="work__slider__controls__item" id="control-previous" cursor-pulse>
					<svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path stroke="none" d="M0 0h24v24H0z" fill="none"/><path d="M5 12h6m3 0h1.5m3 0h.5" /><path d="M5 12l6 6" /><path d="M5 12l6 -6" /></svg>
					<span>previous</span>
				</span>
				<span class="work__slider__controls__counter"><span id="slide-count">1</span>/{work.length}</span>
				<span class="work__slider__controls__item" id="control-next" cursor-pulse>
					<span>next project</span>
					<svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path stroke="none" d="M0 0h24v24H0z" fill="none"/><path d="M5 12h.5m3 0h1.5m3 0h6" /><path d="M13 18l6 -6" /><path d="M13 6l6 6" /></svg>
				</span>
			</div>
	 	</div>
  </main>

  <main class="work--mobile">
	 	{ work.map(project => <article class="work__project">
		  <figure>
				<a target="_blank" href={project.url}>
					<img src={project.image} alt={`${project.name} - ${project.summary}`}>
				</a>
			</figure>
			<div class="work__project__title">
				<h2><a target="_blank" href={project.url}>{project.name}</a></h2>
				<span>{ project.wip && <TagList tags={['WIP']} /> }</span>
			</div>
   	</article>)}
  </main>

  <div></div>
</Layout>

<script is:inline type="module" define:vars={{work}}>
	const slider = document.getElementById('slider');
	const slideCount = document.getElementById('slide-count');
	const sliderUrl = document.getElementById('slider-url');
	const sliderTitle = document.getElementById('slider-title');
	const sliderSummary = document.getElementById('slider-summary');

	let typingTimeouts = []

	const getCurrentSlide = () => {
		const count = +slider.getAttribute('data-slide');
		return count;
	}

	const updateSlide = () => {
		clearTimeouts();
		const slide = getCurrentSlide();
		slideCount.innerText = slide;
		const project = work[slide - 1];
		sliderUrl.setAttribute('href', project.url);
		sliderTitle.setAttribute('href', project.url);
		scrollImages(slide);
		typeEffect(sliderTitle, project.name);
		typeEffect(sliderSummary, project.summary, 15, 5);

		if (project.wip) {
			document.getElementById('work__slider__image__wip').style.opacity = 100;
		} else {
			document.getElementById('work__slider__image__wip').style.opacity = 0;
		}
	}

	const scrollImages = (slide) => {
		const scrollTo = 600 * (slide - 1);
		sliderUrl.scroll({
		  top: scrollTo,
		  left: 0,
		  behavior: "smooth",
		});
	}

	const previous = () => {
		const slide = getCurrentSlide();

		if (slide > 1) {
			const newSlide = slide - 1;
			slider.setAttribute('data-slide', newSlide);
			updateSlide()
		}
	}

	const next = () => {
		const slide = getCurrentSlide();

		if (slide < work.length) {
			const newSlide = slide + 1;
			slider.setAttribute('data-slide', newSlide);
			updateSlide()
		}
	}

	const clearTimeouts = () => {
		if (!typingTimeouts.length) return
		const [timeout, ...rest] = typingTimeouts;
		clearTimeout(timeout)
		typingTimeouts = rest;
		clearTimeouts();
	}

	const typeEffect = (element, text, typingSpeed = 100, deletingSpeed = 50, clearText = false) => {
		const isDeleting = !clearText && !!element.innerHTML.length && !text.startsWith(element.innerHTML);

		if (element.innerText === text) return;

    if (isDeleting) {
      // Deleting effect
      const index = element.innerText.length - 1;
      if (index === 0) {
      	element.innerHTML = 'â€Ž'; // Transparent char to avoid html element to change size in this step
        typingTimeouts.push(setTimeout(() => typeEffect(element, text, typingSpeed, deletingSpeed, true), typingSpeed));
      } else {
      	element.innerHTML = element.innerHTML.substring(0, index);
        typingTimeouts.push(setTimeout(() => typeEffect(element, text, typingSpeed, deletingSpeed), deletingSpeed));
      }
    } else {
      // Typing effect
      const index = clearText ? 1 : (element.innerHTML.length + 1);
      element.innerHTML = text.substring(0, index);
      typingTimeouts.push(setTimeout(() => typeEffect(element, text, typingSpeed, deletingSpeed), typingSpeed));
    }
  }


	document.getElementById('control-previous').addEventListener('click', previous);
	document.getElementById('control-next').addEventListener('click', next);
</script>

<style>
	.work {
		--width: 900px;
		--image-height: 600px;

		width: 100%;
		margin: 0 auto;
		padding: 3rem 2.2rem 0 2.2rem;
		height: 100vh;
		height: 100dvh;
		display: none;
    justify-content: center;
    align-items: center;
	}

	.work__slider {
		position: relative;
  	white-space: nowrap;
		display: flex;
		flex-direction: column;
		gap: 1rem;
		width: var(--width);
	}

	.work__slider__title {
		display: flex;
		flex-direction: column;
		gap: .25rem;
		color: var(--text-color);
		height: 4rem;
	}

	.work__slider__title h2 {
		font-size: 1.25rem;
	}

	.work__slider__title h2:hover {
		text-decoration: line-through;
	}

	.work__slider__title p {
		text-wrap: wrap;
		font-size: .75rem;
	}

	.work__slider__controls {
		color: var(--text-color);
		position: absolute;
		display: flex;
		justify-content: space-between;
		align-items: start;
		transform: rotate(90deg);
		transform-origin: 0 0;
		top: 0;
		left: calc(100% + 2rem);
		width: var(--image-height);
	}

	.work__slider__controls__counter {
		font-size: .8rem;
		align-self: flex-end;
	}

	.work__slider__controls__item {
		display: flex;
		align-items: center;
		gap: .5rem;
	}

	.work__slider__controls__item:hover span {
		text-decoration: line-through;
	}

	.work__slider__controls__item * {
		pointer-events: none;
	}

	.work__slider__controls__item svg {
		color: var(--color-text-main);
	}

	#work__slider__image__wip {
		position: absolute;
		top: 1rem; left: 0;
		transform: scale(1.5);
		transition: opacity .3s;
	}

	.work__slider__image {
		width: var(--width);
		height: var(--image-height);
		background: var(--bg-secondary-color);
	}

	.work__slider__image a {
		display: flex;
		flex-direction: column;
		width: 100%;
		height: 100%;
		overflow: hidden;
	}

	.work__slider__image img {
		pointer-events: none;
		width: 100%;
		height: 100%;
		object-fit: cover;
	}

	/* MOBILE */

	.work--mobile {
		display: flex;
		flex-direction: column;
		justify-content: center;
		align-items: center;
		gap: 4rem;
  	padding: 8rem 1.75rem 5rem 1.75rem;
  	max-width: 100%;
	}

	.work__project__title {
		display: flex;
		align-items: center;
		gap: .5rem;
	}

	.work__project h2 {
		color: white;
		font-size: 1rem;
	}

	.work__project {
		display: flex;
		flex-direction: column;
		position: relative;
	}

	.work__project figure {
		max-width: 600px;
	}

	.work__project figure a {
		display: block;
		width: 100%;
		height: 100%;
	}

	.work__project figure img {
		pointer-events: none;
    width: 100%;
    height: 100%;
		object-fit: cover;
	}

	@media (min-width: 1100px) {
		.work {
			display: flex;
		}

		.work--mobile {
			display: none;
		}
	}
</style>
